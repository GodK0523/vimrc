" Origin
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

" Base
set modelines=0
set nocompatible
set backspace=2
set number
set tabstop=4
set autoindent
set softtabstop=4
set shiftwidth=4
set ruler
set laststatus=2
set showcmd
set nobackup
set noundofile
set noswapfile
set nowritebackup

syntax enable

" Scheme
colorscheme molokai
set guifont=Courier\ New:h10

" Encoding
if has("multi_byte")
	if &termencoding == ""
		let &termencoding = &encoding
	endif
	set encoding=utf-8
	setglobal fileencoding=utf-8
	set fileencodings=ucs-bom,utf-8,latin1
	if has("win32")
		set langmenu=zh_CN.utf-8
		source $VIMRUNTIME/delmenu.vim
		source $VIMRUNTIME/menu.vim
		language messages zh_CN.utf-8
	endif
endif

" Quit insert mode
inoremap jk			<Esc>
vnoremap jk			<Esc>

" Quit normal mode
nnoremap <Space>q	:qa<CR>

" Movement
nnoremap H			^
nnoremap L			$
vnoremap H			^
vnoremap L			$

" Save file
nnoremap <Space>sf	:w<CR>
nnoremap <Space>sa	:wa<CR>

" Search
nnoremap <Space>ss	*
nnoremap <Space>sc	:nohlsearch<CR>

" Window
nnoremap <Space>ww	<C-W>w
nnoremap <Space>wd	<C-W>c
nnoremap <Space>wh	<C-W>h
nnoremap <Space>wj	<C-W>j
nnoremap <Space>wk	<C-W>k
nnoremap <Space>wl	<C-W>l
nnoremap <Space>we	<C-W>=
nnoremap <Space>ws	<C-W>s
nnoremap <Space>wv	<C-W>v

" Buffer
nnoremap <Space>bf	:BufExplorer<CR>

" Shifting
vmap <tab>			>gv
vmap <s-tab>		<gv

" Pathogen
execute pathogen#infect()
execute pathogen#helptags()

" Nerdtree
map <C-M>			:NERDTreeToggle<CR>
let NERDTreeShowBookmarks=1

" CScope
if has("cscope")
	set csprg=cscope.exe
	set csto=1
	set cst
	set nocsverb
	if filereadable("cscope.out")
		cs add cscope.out
	endif
	set csverb
endif

nmap <C-k>s         :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-k>g         :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-k>c         :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-k>t         :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-k>e         :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-k>f         :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-k>i         :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-k>d         :cs find d <C-R>=expand("<cword>")<CR><CR>

" Powerline
set t_Co=256
let g:Powerline_symbols='compatible'

" Ctrlp
let g:ctrlp_map='<C-p>'
let g:ctrlp_cmd='CtrlP'

" Taglist
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
let Tlist_Ctags_Cmd="ctags.exe"
let Tlist_Use_Right_Window=1
let Tlist_Sort_Type="name"
let Tlist_Use_SingleClick=1
let Tlist_WinWidth=40

